{"version":3,"sources":["assets/scripts/Bomb.js"],"names":["cc","Class","Component","properties","bombSprite","type","SpriteFrame","tooltip","explosionPrefab","Prefab","explosionAudio","AudioClip","lifeTime","Float","_direction","v2","_speed","_damage","onLoad","sprite","getComponent","Sprite","addComponent","graphics","Graphics","circle","fillColor","Color","RED","fill","node","width","height","spriteFrame","rigidBody","RigidBody","RigidBodyType","Dynamic","fixedRotation","enabledContactListener","gravityScale","linearDamping","bullet","awakeOnLoad","collider","BoxCollider","size","offset","log","group","position","scheduleOnce","explode","setDirection","dir","normalize","setSpeed","speed","setDamage","damage","update","dt","velocity","x","y","linearVelocity","newPos","setPosition","onCollisionEnter","other","self","handleCollision","onCollisionStay","onBeginContact","contact","selfCollider","otherCollider","otherNode","_isExploding","player","takeDamage","audioEngine","playEffect","explosion","instantiate","parent","addChild","explosionComp","isValid","destroy","onDestroy","unscheduleAllCallbacks","off"],"mappings":"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","sourceRoot":"/","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        bombSprite: {\n            default: null,\n            type: cc.SpriteFrame,\n            tooltip: '炸弹图片'\n        },\n        explosionPrefab: {\n            default: null,\n            type: cc.Prefab,\n            tooltip: '爆炸效果预制体'\n        },\n        explosionAudio: {\n            default: null,\n            type: cc.AudioClip,\n            tooltip: '爆炸音效'\n        },\n        lifeTime: {\n            default: 3,\n            type: cc.Float,\n            tooltip: '炸弹存活时间'\n        },\n        _direction: cc.v2(0, 0),\n        _speed: 0,\n        _damage: 0\n    },\n\n    onLoad() {\n        // 添加精灵组件\n        let sprite = this.getComponent(cc.Sprite);\n        if (!sprite) {\n            sprite = this.addComponent(cc.Sprite);\n        }\n\n        // 如果没有设置炸弹图片，创建一个默认的圆形图形\n        if (!this.bombSprite) {\n            // 创建一个圆形图形\n            let graphics = this.addComponent(cc.Graphics);\n            graphics.circle(0, 0, 10);\n            graphics.fillColor = cc.Color.RED;\n            graphics.fill();\n            \n            // 设置节点大小\n            this.node.width = 20;\n            this.node.height = 20;\n        } else {\n            sprite.spriteFrame = this.bombSprite;\n        }\n\n        // 添加刚体组件\n        let rigidBody = this.getComponent(cc.RigidBody);\n        if (!rigidBody) {\n            rigidBody = this.addComponent(cc.RigidBody);\n            rigidBody.type = cc.RigidBodyType.Dynamic;\n            rigidBody.fixedRotation = true;\n            rigidBody.enabledContactListener = true;\n            rigidBody.gravityScale = 0;\n            rigidBody.linearDamping = 0;\n            rigidBody.bullet = true;\n            \n            // 设置碰撞检测类别和掩码\n            rigidBody.awakeOnLoad = true;\n        }\n\n        // 添加碰撞组件\n        let collider = this.getComponent(cc.BoxCollider);\n        if (!collider) {\n            collider = this.addComponent(cc.BoxCollider);\n            collider.size = cc.size(20, 20);\n            collider.offset = cc.v2(0, 0);\n            cc.log('添加碰撞器，尺寸:', collider.size);\n        }\n\n        // 设置碰撞分组\n        this.node.group = 'bomb';\n        \n        cc.log('炸弹初始化完成 - 位置:', this.node.position, '碰撞器尺寸:', collider.size);\n        \n        // 确保定时销毁\n        this.scheduleOnce(() => {\n            cc.log('炸弹到达生命周期上限，执行爆炸');\n            this.explode();\n        }, this.lifeTime);\n        \n        cc.log('炸弹初始化完成 - 方向:', this._direction, '速度:', this._speed);\n    },\n\n    setDirection(dir) {\n        this._direction = dir.normalize(); // 确保方向向量是单位向量\n        cc.log('设置炸弹方向:', this._direction);\n    },\n\n    setSpeed(speed) {\n        this._speed = speed;\n        cc.log('设置炸弹速度:', this._speed);\n    },\n\n    setDamage(damage) {\n        this._damage = damage;\n    },\n\n    update(dt) {\n        if (!this._direction || !this._speed) {\n            cc.log('炸弹缺少方向或速度:', this._direction, this._speed);\n            return;\n        }\n\n        let rigidBody = this.getComponent(cc.RigidBody);\n        if (rigidBody) {\n            // 使用刚体设置速度\n            let velocity = cc.v2(\n                this._direction.x * this._speed,\n                this._direction.y * this._speed\n            );\n            rigidBody.linearVelocity = velocity;\n            cc.log('炸弹速度更新:', velocity);\n        } else {\n            // 如果没有刚体组件，直接更新位置\n            let newPos = this.node.position;\n            newPos.x += this._direction.x * this._speed * dt;\n            newPos.y += this._direction.y * this._speed * dt;\n            this.node.setPosition(newPos);\n            cc.log('炸弹位置更新:', newPos);\n        }\n    },\n\n    // 使用 onCollisionEnter 和 onBeginContact 双重保险\n    onCollisionEnter(other, self) {\n        cc.log('Bomb 碰撞开始 - 碰撞对象:', other.node.group);\n        this.handleCollision(other.node);\n    },\n\n    onCollisionStay(other, self) {\n        cc.log('Bomb 碰撞持续 - 碰撞对象:', other.node.group);\n    },\n\n    onBeginContact(contact, selfCollider, otherCollider) {\n        cc.log('Bomb 接触开始 - 接触对象:', otherCollider.node.group);\n        this.handleCollision(otherCollider.node);\n    },\n\n    handleCollision(otherNode) {\n        if (this._isExploding) return;\n        \n        cc.log('处理炸弹碰撞 - 碰撞对象:', otherNode.group);\n        \n        if (otherNode.group === 'player') {\n            cc.log('炸弹击中玩家');\n            let player = otherNode.getComponent('Player');\n            if (player && player.takeDamage) {\n                player.takeDamage(this._damage);\n                cc.log('对玩家造成伤害:', this._damage);\n            }\n            this.explode();\n        } else if (otherNode.group === 'wall') {\n            cc.log('炸弹碰到墙壁');\n            this.explode();\n        }\n    },\n\n    explode() {\n        // 防止重复调用\n        if (this._isExploding) {\n            cc.log('炸弹已经在爆炸中，跳过重复调用');\n            return;\n        }\n        this._isExploding = true;\n        \n        cc.log('执行炸弹爆炸效果');\n        \n        // 立即停止移动\n        let rigidBody = this.getComponent(cc.RigidBody);\n        if (rigidBody) {\n            rigidBody.linearVelocity = cc.v2(0, 0);\n        }\n        \n        // 播放爆炸音效\n        if (this.explosionAudio) {\n            cc.audioEngine.playEffect(this.explosionAudio, false, 0.3);\n        }\n\n        // 创建爆炸效果\n        if (this.explosionPrefab) {\n            let explosion = cc.instantiate(this.explosionPrefab);\n            explosion.setPosition(this.node.position);\n            this.node.parent.addChild(explosion);\n\n            // 设置爆炸效果的伤害值\n            let explosionComp = explosion.getComponent('ExplosionEffect');\n            if (explosionComp) {\n                explosionComp.damage = this._damage;\n            }\n        }\n\n        // 立即销毁炸弹\n        if (this.node && this.node.isValid) {\n            this.node.destroy();\n        }\n    },\n\n    // 添加碰撞回调\n    onDestroy() {\n        // 清理定时器和其他资源\n        this.unscheduleAllCallbacks();\n        \n        // 移除所有事件监听\n        if (this.node) {\n            this.node.off('*');\n        }\n        \n        cc.log('炸弹被销毁');\n    }\n}); "]}