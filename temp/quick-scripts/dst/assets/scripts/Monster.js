
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/Monster.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9d5a02WiMxF572qa+T4fVyu', 'Monster');
// scripts/Monster.js

"use strict";

cc.Class({
  "extends": cc.Component,
  properties: {
    maxHealth: {
      "default": 100,
      type: cc.Integer,
      tooltip: '怪物最大生命值'
    },
    collectAudio: {
      "default": null,
      type: cc.AudioClip,
      tooltip: '收集星星的音效'
    },
    currentHealth: {
      "default": 100,
      type: cc.Integer,
      tooltip: '怪物当前生命值'
    },
    healthBar: {
      "default": null,
      type: cc.Node,
      tooltip: '血条节点'
    },
    hitAudio: {
      "default": null,
      type: cc.AudioClip,
      tooltip: '受击音效'
    },
    deathAudio: {
      "default": null,
      type: cc.AudioClip,
      tooltip: '死亡音效'
    },
    bombPrefab: {
      "default": null,
      type: cc.Prefab,
      tooltip: '炸弹预制体'
    },
    starPrefab: {
      "default": null,
      type: cc.Prefab,
      tooltip: '星星预制体'
    },
    detectionRadius: {
      "default": 300,
      type: cc.Float,
      tooltip: '检测玩家的范围'
    },
    moveSpeed: {
      "default": 50,
      type: cc.Float,
      tooltip: '移动速度'
    },
    shootInterval: {
      "default": 2.0,
      type: cc.Float,
      tooltip: '发射间隔'
    }
  },
  onLoad: function onLoad() {
    this.currentHealth = this.maxHealth;
    this.lastShootTime = 0; // 确保初始化射击时间
    // 检查是否有炸弹预制体

    if (!this.bombPrefab) {
      cc.error('未设置炸弹预制体！');
    } // 确保有碰撞组件


    var collider = this.getComponent(cc.BoxCollider);

    if (!collider) {
      collider = this.addComponent(cc.BoxCollider);
      collider.size.width = this.node.width;
      collider.size.height = this.node.height;
    } // 设置碰撞组


    this.node.group = 'monster'; // 获取血条中的 Bar 节点

    if (this.healthBar) {
      this.barNode = this.healthBar.getChildByName('Bar');

      if (!this.barNode) {
        cc.error('找不到 Bar 节点！');
        return;
      } // 保存初始宽度


      this.originalBarWidth = this.barNode.width;
      cc.log('血条初始宽度：', this.originalBarWidth);
    } else {
      cc.error('未设置血条节点！');
    } // 添加死亡标记


    this.isDying = false; // 添加刚体组件

    var rigidBody = this.getComponent(cc.RigidBody);

    if (!rigidBody) {
      rigidBody = this.addComponent(cc.RigidBody);
      rigidBody.type = cc.RigidBodyType.Dynamic;
      rigidBody.fixedRotation = true;
    }
  },
  createHealthBar: function createHealthBar() {
    // 创建血条节点
    var healthBarNode = new cc.Node('HealthBar');
    this.node.addChild(healthBarNode);
    healthBarNode.zIndex = 1; // 创建背景条

    var barBgNode = new cc.Node('BarBg');
    healthBarNode.addChild(barBgNode);
    var barBgSprite = barBgNode.addComponent(cc.Sprite);
    barBgSprite.color = cc.Color.RED; // 创建血量条

    var barNode = new cc.Node('Bar');
    healthBarNode.addChild(barNode);
    var barSprite = barNode.addComponent(cc.Sprite);
    barSprite.color = cc.Color.GREEN; // 设置血条尺寸和位置

    healthBarNode.width = 100;
    healthBarNode.height = 10;
    barBgNode.width = 100;
    barBgNode.height = 10;
    barNode.width = 100;
    barNode.height = 10; // 将血条放在怪物上方

    healthBarNode.setPosition(0, this.node.height / 2 + 10); // 保存引用

    this.healthBar = healthBarNode;
    this.healthBarBg = barBgNode;
  },
  start: function start() {
    this.updateHealthBar();
  },
  takeDamage: function takeDamage(damage) {
    // 如果已经在死亡过程中，不再处理伤害
    if (this.isDying) return;
    if (typeof damage !== 'number' || damage <= 0) return; // 使用 playEffect 播放音效

    if (this.hitAudio) {
      cc.audioEngine.playEffect(this.hitAudio, false, 0.3);
    } // 减少生命值


    this.currentHealth = Math.max(0, this.currentHealth - damage); // 更新血条显示

    if (this.barNode && this.originalBarWidth) {
      var healthPercentage = this.currentHealth / this.maxHealth;
      this.barNode.width = this.originalBarWidth * healthPercentage;
    }

    cc.log('怪物受到伤害:', damage, '当前生命值:', this.currentHealth); // 检查是否死亡

    if (this.currentHealth <= 0 && !this.isDying) {
      this.die();
    }
  },
  updateHealthBar: function updateHealthBar() {
    if (this.healthBar) {
      var healthPercentage = this.currentHealth / this.maxHealth;
      this.healthBar.width = 100 * healthPercentage;
    }
  },
  die: function die() {
    var _this = this;

    // 设置死亡标记
    if (this.isDying) return;
    this.isDying = true; // 使用 playEffect 播放音效

    if (this.deathAudio) {
      var audioId = cc.audioEngine.playEffect(this.deathAudio, false, 0.3);
      cc.audioEngine.setFinishCallback(audioId, function () {
        _this.node.destroy();
      });
    } else {
      this.node.destroy();
    } // 生成星星


    this.spawnStars(3);
  },
  spawnStars: function spawnStars(count) {
    var _this2 = this;

    if (!this.starPrefab) {
      cc.error('星星预制体未设置!');
      return;
    }

    var canvasNode = cc.find('Canvas');
    var worldPos = this.node.convertToWorldSpaceAR(cc.Vec2.ZERO);
    var gameManager = canvasNode.getComponent('GameManager');

    var _loop = function _loop(i) {
      var star = cc.instantiate(_this2.starPrefab);
      star.parent = canvasNode;
      star.zIndex = 999;
      var localPos = canvasNode.convertToNodeSpaceAR(worldPos); // 随机位置偏移

      var offsetX = (Math.random() - 0.5) * 100;
      var offsetY = (Math.random() - 0.5) * 100;
      star.setPosition(localPos.x + offsetX, localPos.y + offsetY); // 添加点击组件

      var button = star.addComponent(cc.Button); // 添加碰撞组件以便于点击

      var collider = star.addComponent(cc.BoxCollider);
      collider.size = star.getContentSize(); // 添加点击事件

      var self = _this2; // 保存Monster实例的引用

      button.node.on('click', function () {
        // 禁用按钮防止多次点击
        button.interactable = false; // 获取场景中的star node位置

        var starNode = cc.find('Canvas/game/starCollect/star');

        if (!starNode) {
          cc.error('找不到star node！');
          return;
        }

        var worldTargetPos = starNode.getPosition(); // 加载并播放收集音效

        cc.resources.load('audios/collect', cc.AudioClip, function (err, audioClip) {
          if (err) {
            cc.error('加载收集音效失败:', err);
            return;
          }

          cc.audioEngine.playEffect(audioClip, false, 3.0);
        }); // 创建飞向目标的动作

        var moveAction = cc.sequence(cc.moveTo(0.5, worldTargetPos).easing(cc.easeBackIn()), cc.callFunc(function () {
          // 通知GameManager增加星星数量
          if (gameManager) {
            gameManager.addStar();
          }

          star.destroy();
        }));
        star.runAction(moveAction);
      });
    };

    for (var i = 0; i < count; i++) {
      _loop(i);
    }
  },
  update: function update(dt) {
    if (this.isDying) return; // 获取玩家节点

    var player = cc.find('Canvas/game/player');

    if (!player) {
      cc.warn('找不到玩家节点！请确保场景中玩家节点的路径是 Canvas/game/player');
      return;
    } // 获取世界坐标下的位置


    var monsterPos = this.node.parent.convertToWorldSpaceAR(this.node.position);
    var playerPos = player.parent.convertToWorldSpaceAR(player.position); // 计算与玩家的距离

    var distance = cc.Vec2.distance(cc.v2(monsterPos.x, monsterPos.y), cc.v2(playerPos.x, playerPos.y)); // 添加调试日志

    cc.log('怪物位置:', monsterPos, '玩家位置:', playerPos, '距离:', distance, '检测范围:', this.detectionRadius); // 在检测范围内

    if (distance < this.detectionRadius) {
      // 追踪玩家
      var direction = cc.v2(playerPos.x - monsterPos.x, playerPos.y - monsterPos.y).normalize();
      var velocity = this.node.getComponent(cc.RigidBody).linearVelocity;
      velocity.x = direction.x * this.moveSpeed;
      velocity.y = direction.y * this.moveSpeed;
      this.node.getComponent(cc.RigidBody).linearVelocity = velocity;
      cc.log('怪物正在移动，速度:', velocity); // 发射炸弹

      this.shootBomb(player.position);
    } else {
      // 停止移动
      var _velocity = this.node.getComponent(cc.RigidBody).linearVelocity;
      _velocity.x = 0;
      _velocity.y = 0;
      this.node.getComponent(cc.RigidBody).linearVelocity = _velocity;
      cc.log('怪物停止移动，超出检测范围');
    }
  },
  shootBomb: function shootBomb(targetPos) {
    var currentTime = cc.director.getTotalTime() / 1000;
    cc.log('尝试发射炸弹 - 当前时间:', currentTime, '上次发射时间:', this.lastShootTime, '发射间隔:', this.shootInterval, '是否可以发射:', currentTime - this.lastShootTime >= this.shootInterval);

    if (currentTime - this.lastShootTime < this.shootInterval) {
      return;
    }

    if (!this.bombPrefab) {
      cc.error('炸弹预制体未设置！请在编辑器中设置 Monster 组件的 Bomb Prefab 属性');
      return;
    }

    this.lastShootTime = currentTime; // 创建炸弹

    var bomb = cc.instantiate(this.bombPrefab);

    if (!bomb) {
      cc.error('炸弹预制体实例化失败！');
      return;
    } // 设置炸弹位置为怪物当前位置


    bomb.setPosition(this.node.position);
    this.node.parent.addChild(bomb); // 计算方向（使用本地坐标）

    var direction = targetPos.sub(this.node.position); // 设置炸弹属性

    var bombComp = bomb.getComponent('Bomb');

    if (bombComp) {
      bombComp.setDirection(direction);
      bombComp.setSpeed(300); // 增加速度使炸弹移动更明显

      bombComp.setDamage(20);
      cc.log('炸弹已发射！方向:', direction, '目标位置:', targetPos, '当前位置:', this.node.position);
    } else {
      cc.error('炸弹没有Bomb组件！请确保炸弹预制体已添加 Bomb 组件');
      bomb.destroy();
    }
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,